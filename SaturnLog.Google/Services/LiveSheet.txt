using Google.Apis.Sheets.v4.Data;
using SaturnLog.Google.Extensions;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SaturnLog.Google
{
    public class LiveSheet : IList<LiveRow>
    {
        #region Private Fields
        // All the rows belonging to the sheet ordered from top to bottom.
        private IList<LiveRow> _rows;
        #endregion

        #region Properties
        // Spreadsheet Id
        public string SpreadsheetId { get; }

        // Sheet Title Id
        public string TitleId { get; }
        
        // Number of columns in the sheet
        public int ColumnCount { get; }

        // Number of rows in the sheet
        public int RowCount { get; }
        #endregion

        #region Constructors
        // Private Base. Not to be use on its own. Data placeholder has to be filled with the sheet rows / cells,
        // as well as values of the sheet dimensions properties (ColumnCount, RowCount) has to be set.
        private LiveSheet(string spreadsheetId, string sheetTitleId)
        {
            // Assign spreadsheet id
            this.SpreadsheetId = spreadsheetId;

            // Assign sheet title id
            this.TitleId = sheetTitleId;
            
            // Build rows placeholder list.
            this._rows = new List<LiveRow>();
        }
        
        // Empty from parameters
        public LiveSheet(string spreadsheetId, string sheetTitleId, int columnCount, int rowCount) 
            : this(spreadsheetId, sheetTitleId)
        {
            // Assign sheet dimensions
            this.ColumnCount = columnCount;
            this.RowCount = rowCount;

            // Build empty rows list
            this.BuildEmptyRowsListFromDiemensions();
        }

        // Parameters and data
        public LiveSheet(string spreadsheetId, string sheetTitleId, int columnCount, int rowCount, IList<IList<string>> cellsDataGrid) 
            : this(spreadsheetId, sheetTitleId)
        {
            // Assign sheet dimensions
            this.ColumnCount = columnCount;
            this.RowCount = rowCount;
            // Build empty rows list
            this.BuildRowsListFromSheetData(cellsDataGrid);
        }

        // Parameters and data
        public LiveSheet(string spreadsheetId, string sheetTitleId, int columnCount, int rowCount, IList<IList<object>> cellsDataGrid) 
            : this(spreadsheetId, sheetTitleId)
        {
            // Assign sheet dimensions
            this.ColumnCount = columnCount;
            this.RowCount = rowCount;

            // Build empty rows list
            this.BuildRowsListFromSheetData(cellsDataGrid);
        }

        // Parameters and data
        public LiveSheet(string spreadsheetId, string sheetTitleId, int columnCount, int rowCount, IList<IList<CellData>> cellsDataGrid) 
            : this(spreadsheetId, sheetTitleId)
        {
            // Assign sheet dimensions
            this.ColumnCount = columnCount;
            this.RowCount = rowCount;

            // Build empty rows list
            this.BuildRowsListFromSheetData(cellsDataGrid);
        }

        // Parameters and data
        public LiveSheet(string spreadsheetId, string sheetTitleId, int columnCount, int rowCount, IList<RowData> rowsData) 
            : this(spreadsheetId, sheetTitleId)
        {
            // Assign sheet dimensions
            this.ColumnCount = columnCount;
            this.RowCount = rowCount;

            // Build empty rows list
            this.BuildRowsListFromSheetData(rowsData);
        }

        // Parameters and content
        public LiveSheet(string spreadsheetId, Sheet sheetData) 
            : this(spreadsheetId, sheetData.Properties.Title)
        {
            // Assign sheet data dimensions based on the size of the provided sheet.
            this.ColumnCount = sheetData.Properties.GridProperties.ColumnCount.Value;
            this.RowCount = sheetData.Properties.GridProperties.RowCount.Value;

            // Obtain rows data for this sheet if any available.
            IList<RowData> rowsData = sheetData.Data?.ElementAtOrDefault(0)?.RowData;
            
            // Build empty rows list based and fill it with the sheet data.
            this.BuildRowsListFromSheetData(rowsData);
        }
        #endregion

        #region Methods
        #region GetDataAs
        // Returns sheet stored data as a strings grid. Rows / Columns
        public IList<IList<string>> GetDataAsStringsGrid()
        {
            // Create empty instance of the strings grid.
            List<IList<string>> stringsGrid = new List<IList<string>>();

            // Get data of each row as a list of strings
            // and add it in to the strings grid.
            foreach (LiveRow row in this._rows)
                stringsGrid.Add(row.GetDataAsStrings());

            // Return strings grid.
            return stringsGrid;
        }

        // Returns sheet stored data as a objects grid. Rows / Columns
        public IList<IList<object>> GetDataAsObjectsGrid()
        {
            // Create empty instance of the objects grid.
            List<IList<object>> objectsGrid = new List<IList<object>>();

            // Get data of each row as a list of objects
            // and add it in to the objects grid.
            foreach (LiveRow row in this._rows)
                objectsGrid.Add(row.GetDataAsObjects());

            // Return objects grid.
            return objectsGrid;
        }

        // Returns sheet stored data as rows list.
        public IList<LiveRow> GetDataAsRowsList()
        {
            // Create empty instance of the rows list.
            IList<LiveRow> rowsList = new List<LiveRow>();

            // Get data of each row as a list of strings
            // and add it in to the strings grid.
            foreach (LiveRow row in this._rows)
                rowsList.Add(row);

            // Return rows list.
            return rowsList;
        }
        #endregion

        #region SetDataFrom
        // Set sheet data from strings cells grid
        public void SetDataFromStringsGrid(int leftBufferIndex, int topBufferIndex, IList<IList<string>> cellsGridData, bool ignoreNullData = true)
        {
            // Do nothing and return if no data has been provided. Or provided 
            // cells grid data does not contain data for at least one row.
            if (cellsGridData == null || cellsGridData.Count < 1) return;

            // Get whichever is lower: Number of the rows in the provided cells grid data,
            // or the number of the rows in the sheet minus row top buffer index.
            int rowsCount = Math.Min(cellsGridData.Count, this.RowCount - topBufferIndex);

            // From 0 to the last row, either on the sheet or row of provided data.
            for (int rowIndex = 0; rowIndex < rowsCount; rowIndex++)
            {
                // Obtain strings cells data for this specific row if any available in the cells strings grid data.
                IList<string> cellsData = cellsGridData[rowIndex];

                // Determine index of the row to be filled with the data, by adding 
                // top buffer index, to the index of the source row in the cells strings grid data.
                int bufferRelativeRowIndex = topBufferIndex + rowIndex;

                // Get row to be filled with the data.
                LiveRow row = this._rows[bufferRelativeRowIndex];

                // Fill the row with the data.
                row.SetDataFromStringsList(leftBufferIndex, cellsData, ignoreNullData);
            }
        }

        // Set sheet data from objects grid
        public void SetDataFromObjectsGrid(int leftBufferIndex, int topBufferIndex, IList<IList<object>> cellsGridData, bool ignoreNullData = true)
        {
            // Do nothing and return if no data has been provided. Or provided 
            // cells grid data does not contain data for at least one row.
            if (cellsGridData == null || cellsGridData.Count < 1) return;

            // Get whichever is lower: Number of the rows in the provided cells grid data,
            // or the number of the rows in the sheet minus row top buffer index.
            int rowsCount = Math.Min(cellsGridData.Count, this.RowCount - topBufferIndex);

            // From 0 to the last row, either on the sheet or row of provided data.
            for (int rowIndex = 0; rowIndex < rowsCount; rowIndex++)
            {
                // Obtain objects row data for this specific row if any available in the cells objects grid data.
                IList<object> cellsData = cellsGridData[rowIndex];

                // Determine index of the row to be filled with the data, by adding 
                // top buffer index, to the index of the source row in the cells objects grid data.
                int bufferRelativeRowIndex = topBufferIndex + rowIndex;

                // Get row to be filled with the data.
                LiveRow row = this._rows[bufferRelativeRowIndex];

                // Fill the row with the data.
                row.SetDataFromObjectsList(leftBufferIndex, cellsData, ignoreNullData);
            }
        }

        // Set sheet data from objects grid
        public void SetDataFromCellsGrid(int leftBufferIndex, int topBufferIndex, IList<IList<CellData>> cellsGridData, bool ignoreNullData = true)
        {
            // Do nothing and return if no data has been provided. Or provided 
            // cells grid data does not contain data for at least one row.
            if (cellsGridData == null || cellsGridData.Count < 1) return;

            // Get whichever is lower: Number of the rows in the provided cells grid data,
            // or the number of the rows in the sheet minus row top buffer index.
            int rowsCount = Math.Min(cellsGridData.Count, this.RowCount - topBufferIndex);

            // From 0 to the last row, either on the sheet or row of provided data.
            for (int rowIndex = 0; rowIndex < rowsCount; rowIndex++)
            {
                // Obtain objects row data for this specific row if any available in the strings grid data.
                IList<CellData> cellsData = cellsGridData[rowIndex];

                // Determine index of the row to be filled with the data, by adding 
                // top buffer index, to the index of the source row in the objects grid data.
                int bufferRelativeRowIndex = topBufferIndex + rowIndex;

                // Get row to be filled with the data.
                LiveRow row = this._rows[bufferRelativeRowIndex];

                // Fill the row with the data.
                row.SetDataFromCellsDataList(leftBufferIndex, cellsData, ignoreNullData);
            }
        }

        // Set sheet data from rows list
        public void SetDataFromRowsDataList(int leftBufferIndex, int topBufferIndex, IList<RowData> rowsData, bool ignoreNullData = true)
        {
            // Do nothing and return if no data has been provided. Or provided 
            // cells grid data does not contain data for at least one row.
            if (rowsData == null || rowsData.Count < 1) return;
            
            // Get whichever is lower: Number of the rows in the provided rows data,
            // or the number of the rows in the sheet minus row top buffer index.
            int rowsCount = Math.Min(rowsData.Count, this.RowCount - topBufferIndex);

            // From 0 to the last row, either on the sheet or row of provided data.
            for (int rowIndex = 0; rowIndex < rowsCount; rowIndex++)
            {
                // Obtain row data for this specific row.
                RowData rowData = rowsData[rowIndex];

                // Determine index of the row to be filled with the data, by adding 
                // top buffer index, to the index of the source row in the cells grid data.
                int bufferRelativeRowIndex = topBufferIndex + rowIndex;

                // Get row to be filled with the data.
                LiveRow row = this._rows[bufferRelativeRowIndex];

                // Fill the row with the data.
                row.SetDataFromRowData(leftBufferIndex, rowData, ignoreNullData);
            }
        }

        // Set sheet data from the sheet
        public void SetDataFromSheetData(Sheet sheetData, bool ignoreNullData = true)
        {
            // Get sheet data as rows collection if available.
            IList<RowData> rows = sheetData.Data?.ElementAtOrDefault(0)?.RowData;

            // Set sheet data from rows list, starting from A1 cell.
            this.SetDataFromRowsDataList(0, 0, rows, ignoreNullData);
        }
        #endregion
        #endregion

        #region Private Helpers
        // Fill the sheet data placeholder rows list with the number of rows/cells
        // matching values of the sheet dimensions related properties.
        private void BuildEmptyRowsListFromDiemensions()
        {
            // Create appropriate amount of rows filled with appropriate number of empty cells.
            // Both number of rows and columns depending on current values of the sheet size related properties.
            for (int rowIndex = 0; rowIndex < this.RowCount; rowIndex++)
            {
                // Create new row with number of columns depending on the number of columns in the sheet,
                LiveRow row = new LiveRow(this.SpreadsheetId, this.TitleId, columnIndex: 0, rowIndex: rowIndex, columnCount: this.ColumnCount);

                // Add newly create row to the sheet rows data.
                this._rows.Add(row); 
            }
        }

        // Fill the empty sheet data placeholder rows list with the number of rows/cells
        // matching required row/cells count. Create each row/cell from corresponding
        // entry in the provided cells data grid, or create empty row/cell if no
        // corresponding data can be found.
        private void BuildRowsListFromSheetData(IList<IList<string>> cellsGridData)
        {
            // Create appropriate amount of rows filled with appropriate number of empty cells.
            // Both number of rows and columns depending on current values of the provided sheet size data.
            for (int rowIndex = 0; rowIndex < this.RowCount; rowIndex++)
            {
                // Get corresponding cells string data. Null will cause creation of an empty cell.
                IList<string> cellsData = cellsGridData?.ElementAtOrDefault(rowIndex);

                // Create new row with number of columns depending on the number of columns in the sheet,
                LiveRow row = new LiveRow(this.SpreadsheetId, this.TitleId, columnIndex: 0, rowIndex: rowIndex, columnCount: this.ColumnCount, cellsData: cellsData);

                // Add newly create row to the sheet rows data.
                this._rows.Add(row);
            }
        }

        // Fill the empty sheet data placeholder rows list with the number of rows/cells
        // matching required row/cells count. Create each crow/ell from corresponding
        // entry in the provided cells data grid, or create empty row/cell if no
        // corresponding data can be found.
        private void BuildRowsListFromSheetData(IList<IList<object>> cellsGridData)
        {
            // Create appropriate amount of rows filled with appropriate number of empty cells.
            // Both number of rows and columns depending on current values of the provided sheet size data.
            for (int rowIndex = 0; rowIndex < this.RowCount; rowIndex++)
            {
                // Get corresponding cells object data. Null will cause creation of an empty cell.
                IList<object> cellsData = cellsGridData?.ElementAtOrDefault(rowIndex);

                // Create new row with number of columns depending on the number of columns in the sheet,
                LiveRow row = new LiveRow(this.SpreadsheetId, this.TitleId, columnIndex: 0, rowIndex: rowIndex, columnCount: this.ColumnCount, cellsData: cellsData);

                // Add newly create row to the sheet rows data.
                this._rows.Add(row);
            }
        }

        // Fill the empty sheet data placeholder rows list with the number of rows/cells
        // matching required row/cells count. Create each row/cell from corresponding
        // entry in the provided cells data grid, or create empty row/cell if no
        // corresponding data can be found.
        private void BuildRowsListFromSheetData(IList<IList<CellData>> cellsGridData)
        {
            // Create appropriate amount of rows filled with appropriate number of empty cells.
            // Both number of rows and columns depending on current values of the provided sheet size data.
            for (int rowIndex = 0; rowIndex < this.RowCount; rowIndex++)
            {
                // Get corresponding cells data. Null will cause creation of an empty cell.
                IList<CellData> cellsData = cellsGridData?.ElementAtOrDefault(rowIndex);

                // Create new row with number of columns depending on the number of columns in the sheet,
                LiveRow row = new LiveRow(this.SpreadsheetId, this.TitleId, columnIndex: 0, rowIndex: rowIndex, columnCount: this.ColumnCount, cellsData: cellsData);

                // Add newly create row to the sheet rows data.
                this._rows.Add(row);
            }

        }

        // Fill the empty sheet data placeholder rows list with the number of rows/cells
        // matching required row/cells count. Create each row/cell from corresponding
        // entry in the provided rows data, or create empty row/cell if no
        // corresponding data can be found.
        private void BuildRowsListFromSheetData(IList<RowData> rowsData)
        {
            // Create appropriate amount of rows filled with appropriate number of empty cells.
            // Both number of rows and columns depending on current values of the provided sheet size data.
            for (int rowIndex = 0; rowIndex < this.RowCount; rowIndex++)
            {
                // Get corresponding row data. Null will cause creation of an empty cell.
                RowData rowData = rowsData?.ElementAtOrDefault(rowIndex);

                // Create new row with number of columns depending on the number of columns in the sheet,
                LiveRow row = new LiveRow(this.SpreadsheetId, this.TitleId, columnIndex: 0, rowIndex: rowIndex, columnCount: this.ColumnCount, rowData: rowData);

                // Add newly create row to the sheet rows data.
                this._rows.Add(row);
            }
        }
        #endregion

        #region IList<RowRawData> implementation
        public int Count => this._rows.Count;

        public bool IsReadOnly => this._rows.IsReadOnly;

        public LiveRow this[int index] { get => this._rows[index]; set => this._rows[index] = value; }

        public int IndexOf(LiveRow item)
        {
            return this._rows.IndexOf(item);
        }

        public void Insert(int index, LiveRow item)
        {
            this._rows.Insert(index, item);
        }

        public void RemoveAt(int index)
        {
            this._rows.RemoveAt(index);
        }

        public void Add(LiveRow item)
        {
            this._rows.Add(item);
        }

        public void Clear()
        {
            this._rows.Clear();
        }

        public bool Contains(LiveRow item)
        {
            return this._rows.Contains(item);
        }

        public void CopyTo(LiveRow[] array, int arrayIndex)
        {
            this._rows.CopyTo(array, arrayIndex);
        }

        public bool Remove(LiveRow item)
        {
            return this._rows.Remove(item);
        }

        public IEnumerator<LiveRow> GetEnumerator()
        {
            return this._rows.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return this._rows.GetEnumerator();
        }
        #endregion
    }
}
