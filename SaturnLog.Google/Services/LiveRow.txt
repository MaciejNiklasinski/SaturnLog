using Google.Apis.Sheets.v4.Data;
using SaturnLog.Google.Extensions;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SaturnLog.Google
{
    // If the row is a part of LiveRange rather then LiveSheet, and the LiveRange left column index is not equal 0,
    // current LiveRow.LeftIndex will not be 0, but rather will be equal to the index of the first left column 
    // of the containing LiveRange, as well as all the cells contained by the row will be indexed relatively 
    // to the Range rather then relatively to the sheet.
    public class LiveRow : IList<LiveCell>
    {
        #region Private Fields
        // Rows of cells.
        private IList<LiveCell> _cells;
        #endregion

        #region Properties
        // Spreadsheet Id
        public string SpreadsheetId { get; }

        // Sheet Title Id
        public string SheetTitleId { get; }

        // Index of the row in the sheet
        public int RowIndex { get; }

        // Index of the first left cell in the row. 
        public int LeftIndex { get; }

        // Index of the last right cell in the row. 
        public int RightIndex { get { return this.ColumnCount - 1 - this.LeftIndex; } }

        // Number of the columns in the row relative to the number of columns in the LiveRange
        // rather then LiveSheet, if current LiveRow is a part of one.
        public int ColumnCount { get; }
        #endregion

        #region Constructors
        // Private Base. Not to be use on its own. Cells data placeholder has to be filled with
        // cells, as well as ColumCount has to have appropriate value assigned to it.
        private LiveRow(string spreadsheetId, string sheetTitleId, int columnIndex, int rowIndex)
        {
            // Assign spreadsheet id
            this.SpreadsheetId = spreadsheetId;

            // Assign sheet title id
            this.SheetTitleId = sheetTitleId;

            // Assign row dimensions
            this.LeftIndex = columnIndex;
            this.RowIndex = rowIndex;

            // Create cells placeholder instance. 
            this._cells = new List<LiveCell>();
        }

        // Empty from parameters
        public LiveRow(string spreadsheetId, string sheetTitleId, int columnIndex, int rowIndex, int columnCount)
            : this(spreadsheetId, sheetTitleId, columnIndex, rowIndex)
        {
            // Assign total column count.
            this.ColumnCount = columnCount;

            // Build empty rows list
            this.BuildEmptyCellsList();
        }

        // Parameters and data
        public LiveRow(string spreadsheetId, string sheetTitleId, int columnIndex, int rowIndex, int columnCount, IList<string> cellsData)
            : this(spreadsheetId, sheetTitleId, columnIndex, rowIndex)
        {
            // Assign total column count.
            this.ColumnCount = columnCount;

            // Build rows list pre-filled with provided row data.
            this.BuildCellsListFromRowData(cellsData);
        }

        // Parameters and data
        public LiveRow(string spreadsheetId, string sheetTitleId, int columnIndex, int rowIndex, int columnCount, IList<object> cellsData)
            : this(spreadsheetId, sheetTitleId, columnIndex, rowIndex)
        {
            // Assign total column count.
            this.ColumnCount = columnCount;

            // Build rows list pre-filled with provided row data.
            this.BuildCellsListFromRowData(cellsData);
        }

        // Parameters and data
        public LiveRow(string spreadsheetId, string sheetTitleId, int columnIndex, int rowIndex, int columnCount, IList<CellData> cellsData)
            : this(spreadsheetId, sheetTitleId, columnIndex, rowIndex)
        {
            // Assign total column count.
            this.ColumnCount = columnCount;

            // Build cells placeholder list.
            this.BuildCellsListFromRowData(cellsData);
        }

        // Parameters and content
        public LiveRow(string spreadsheetId, string sheetTitleId, int columnIndex, int rowIndex, int columnCount, RowData rowData)
            : this(spreadsheetId, sheetTitleId, columnIndex, rowIndex)
        {
            // Assign total column count.
            this.ColumnCount = columnCount;

            // Build cells placeholder list.
            this.BuildCellsListFromRowData(rowData);
        }
        #endregion

        #region Methods 
        #region GetDataAs
        // Get row data as strings list
        public IList<string> GetDataAsStrings()
        {
            // Create empty instance of the strings list.
            List<string> stringsList = new List<string>();

            // For each cell in the row.
            foreach (LiveCell cell in this._cells)
            {
                // Get cell string data
                string cellString = cell.GetDataAsString();

                // Add it in to the string list.
                stringsList.Add(cellString);
            }

            // Return row data as a strings list.
            return stringsList;
        }

        // Get row data as objects list
        public IList<object> GetDataAsObjects()
        {
            // Create empty instance of the objects list.
            List<object> objectsList = new List<object>();
            
            // For each cell in the row.
            foreach (LiveCell cell in this._cells)
            {
                // Get cell string data
                string cellObject = cell.GetDataAsObject();

                // Add it in to the object list.
                objectsList.Add(cellObject);
            }

            // Return row data as a objects list.
            return objectsList;
        }

        // Get row data as a data as row data
        public IList<LiveCell> GetDataAsCells()
        {
            // Create empty instance of the cells list.
            List<LiveCell> cellsList = new List<LiveCell>();

            // Get each cell and add it in to the cells list.
            foreach (LiveCell cell in this._cells)
                cellsList.Add(cell);

            // Return row data as a cells list.
            return cellsList;
        }
        #endregion

        #region SetDataFrom
        // Set row data from strings list.
        public void SetDataFromStringsList(int leftBufferIndex, IList<string> cellsData, bool ignoreNullData = true)
        {
            // Return if no data has been provided. Or provided cells data 
            // does not contain data for at least one cell.
            if (cellsData == null || cellsData.Count < 1) return;

            // Get whichever is lower: Number of the columns in the provided cells data,
            // or the number of the cells in the row minus column left buffer index.
            int cellsCount = Math.Min(cellsData.Count, this.ColumnCount - leftBufferIndex);

            // From 0 to the last cell, either on the row or cells of provided data.
            for (int cellIndex = 0; cellIndex < cellsCount; cellIndex++)
            {
                // Obtain string cell data for this specific cell.
                string cellData = cellsData.ElementAtOrDefault(cellIndex);

                // Determine index of the cell to be filled with the data, by adding 
                // left buffer index, to the index of the source cell in the strings row data.
                int bufferRelativeCellIndex = leftBufferIndex + cellIndex;

                // Get cell to be filled with the data.
                LiveCell cell = this._cells[bufferRelativeCellIndex];

                // Fill the cell with the data.
                cell.SetDataFromString(cellData, ignoreNullData);
            }
        }

        // Set row data from objects list.
        public void SetDataFromObjectsList(int leftBufferIndex, IList<object> cellsData, bool ignoreNullData = true)
        {
            // Return if no data has been provided. Or provided cells data 
            // does not contain data for at least one cell.
            if (cellsData == null || cellsData.Count < 1) return;

            // Get whichever is lower: Number of the columns in the provided cells data,
            // or the number of the cells in the row minus column left buffer index.
            int cellsCount = Math.Min(cellsData.Count, this.ColumnCount - leftBufferIndex);

            // From 0 to the last cell, either on the row or cells of provided data.
            for (int cellIndex = 0; cellIndex < cellsCount; cellIndex++)
            {
                // Obtain object cell data for this specific cell.
                object cellData = cellsData.ElementAtOrDefault(cellIndex);

                // Determine index of the cell to be filled with the data, by adding 
                // left buffer index, to the index of the source cell in the objects cells data.
                int bufferRelativeCellIndex = leftBufferIndex + cellIndex;
                
                // Get cell to be filled with the data.
                LiveCell cell = this._cells[bufferRelativeCellIndex];

                // Fill the cell with the data.
                cell.SetDataFromObject(cellData, ignoreNullData);
            }
        }

        // Set row data from cells data list.
        public void SetDataFromCellsDataList(int leftBufferIndex, IList<CellData> cellsData, bool ignoreNullData = true)
        {
            // Return if no data has been provided. Or provided cells data 
            // does not contain data for at least one cell.
            if (cellsData == null || cellsData.Count < 1) return;

            // Get whichever is lower: Number of the columns in the provided cells data,
            // or the number of the cells in the row minus column left buffer index.
            int cellsCount = Math.Min(cellsData.Count, this.ColumnCount - leftBufferIndex);

            // From 0 to the last cell, either on the row or cells of provided data.
            for (int cellIndex = 0; cellIndex < cellsCount; cellIndex++)
            {
                // Obtain cell data for this specific cell.
                CellData cellData = cellsData[cellIndex];

                // Determine index of the cell to be filled with the data, by adding 
                // left buffer index, to the index of the source cell in the cells list.
                int bufferRelativeCellIndex = leftBufferIndex + cellIndex;

                // Get cell to be filled with the data.
                LiveCell cell = this._cells[bufferRelativeCellIndex];

                // Fill the cell with the data.
                cell.SetDataFromCellData(cellData, ignoreNullData);
            }
        }

        // Set row data from row data.
        public void SetDataFromRowData(int leftBufferIndex, RowData rowData, bool ignoreNullData = true)
        {
            // Use cells from the provided row data to set data from.
            this.SetDataFromCellsDataList(leftBufferIndex, rowData?.Values, ignoreNullData);
        }
        #endregion
        #endregion

        #region Private Helpers
        // Fill the row data placeholder cells list with the number of cells
        // matching required row cells count. 
        private void BuildEmptyCellsList()
        {
            // Fill empty cells placeholder with appropriate number of empty cells.
            for (int cIndex = 0; cIndex < this.ColumnCount; cIndex++)
            {
                // Determine index of the cell to be created, by adding 
                // row left buffer index, to the cell order index.
                int bufferRelativeCellIndex = this.LeftIndex + cIndex;

                // Build new empty cell instance.
                LiveCell cell = new LiveCell(this.SpreadsheetId, this.SheetTitleId, bufferRelativeCellIndex, this.RowIndex);

                // Add created cell to cells list.
                this._cells.Add(cell);
            }
        }
        
        // Fill the row data placeholder cells list with the number of cells
        // matching required row cells count. Create each cell from corresponding
        // entry in the provided cells data.
        private void BuildCellsListFromRowData(IList<object> cellsData)
        {
            // Fill empty cells placeholder with appropriate number of cells created
            // using cell data found in the provided cells data.
            for (int cIndex = 0; cIndex < this.ColumnCount; cIndex++)
            {
                // Determine index of the cell to be created, by adding 
                // row left buffer index, to the cell order index.
                int bufferRelativeCellIndex = this.LeftIndex + cIndex;

                // Build new cell instance based on the provided data.
                LiveCell cell = new LiveCell(this.SpreadsheetId, this.SheetTitleId, bufferRelativeCellIndex, this.RowIndex, cellsData?.ElementAtOrDefault(cIndex));

                // Add created cell to cells list.
                this._cells.Add(cell);
            }
        }

        // Fill the row data placeholder cells list with the number of cells
        // matching required row cells count. Create each cell from corresponding
        // entry in the provided cells data.
        private void BuildCellsListFromRowData(IList<string> cellsData)
        {
            // Fill empty cells placeholder with appropriate number of cells created
            // using cell data found in the provided cells data.
            for (int cIndex = 0; cIndex < this.ColumnCount; cIndex++)
            {
                // Determine index of the cell to be created, by adding 
                // row left buffer index, to the cell order index.
                int bufferRelativeCellIndex = this.LeftIndex + cIndex;

                // Build new cell instance based on the provided data.
                LiveCell cell = new LiveCell(this.SpreadsheetId, this.SheetTitleId, bufferRelativeCellIndex, this.RowIndex, cellsData?.ElementAtOrDefault(cIndex));

                // Add created cell to cells list.
                this._cells.Add(cell);
            }
        }

        // Fill the row data placeholder cells list with the number of cells
        // matching required row cells count. Create each cell from corresponding
        // entry in the provided cells data.
        private void BuildCellsListFromRowData(IList<CellData> cellsData)
        {
            // Fill empty cells placeholder with appropriate number of cells created
            // using cell data found in the provided cells data.
            for (int cIndex = 0; cIndex < this.ColumnCount; cIndex++)
            {
                // Determine index of the cell to be created, by adding 
                // row left buffer index, to the cell order index.
                int bufferRelativeCellIndex = this.LeftIndex + cIndex;

                // Build new cell instance based on the provided data.
                LiveCell cell = new LiveCell(this.SpreadsheetId, this.SheetTitleId, bufferRelativeCellIndex, this.RowIndex, cellsData?.ElementAtOrDefault(cIndex));

                // Add created cell to cells list.
                this._cells.Add(cell);
            }
        }

        // Fill the row data placeholder cells list with the number of cells
        // matching required row cells count. Create each cell from corresponding
        // entry in the provided row data.
        private void BuildCellsListFromRowData(RowData rowData)
        {
            // Fill empty cells placeholder with appropriate number of cells created using
            // cell data found in the provided row data - if any available, or not available.
            for (int cIndex = 0; cIndex < this.ColumnCount; cIndex++)
            {
                // Determine index of the cell to be created, by adding 
                // row left buffer index, to the cell order index.
                int bufferRelativeCellIndex = this.LeftIndex + cIndex;

                // Build new cell instance based on the provided data, or provided null
                // if no data for this cell has been provided in the row data.
                LiveCell cell = new LiveCell(this.SpreadsheetId, this.SheetTitleId, bufferRelativeCellIndex, this.RowIndex, rowData?.GetCellDataAsData(cIndex));

                // Add created cell to cells list.
                this._cells.Add(cell);
            }
        }
        #endregion

        #region IList<CellRawData> implementation
        public int Count => this._cells.Count;

        public bool IsReadOnly => this._cells.IsReadOnly;

        public LiveCell this[int index] { get => this._cells[index]; set => this._cells[index] = value; }

        public int IndexOf(LiveCell item)
        {
            return this._cells.IndexOf(item);
        }

        public void Insert(int index, LiveCell item)
        {
            this._cells.Insert(index, item);
        }

        public void RemoveAt(int index)
        {
            this._cells.RemoveAt(index);
        }

        public void Add(LiveCell item)
        {
            this._cells.Add(item);
        }

        public void Clear()
        {
            this._cells.Clear();
        }

        public bool Contains(LiveCell item)
        {
            return this._cells.Contains(item);
        }

        public void CopyTo(LiveCell[] array, int arrayIndex)
        {
            this._cells.CopyTo(array, arrayIndex);
        }

        public bool Remove(LiveCell item)
        {
            return this._cells.Remove(item);
        }

        public IEnumerator<LiveCell> GetEnumerator()
        {
            return this._cells.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return this._cells.GetEnumerator();
        }
        #endregion
    }
}
