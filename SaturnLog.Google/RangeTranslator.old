using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SaturnLog.Google
{
    public static class RangeTranslator
    {
        private static readonly char[] Numbers = new char[10] { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' };

        public static void RangeStringToParameters(string range, out string sheetTitleId, out int leftColumnIndex, out int topRowIndex, out int columnCount, out int rowCount)
        {
            // Get index of the first letter of the range sheet title id.
            // Always equal 0;
            int sheetTitleIdStartIndex = 0;
            
            // Length of the string representing range sheet title id.
            // Equal to the index of the first separator last char '!'.
            int sheetTitleIdLenght = range.LastIndexOf(@"!");

            // Get index of the first letter of the string representing left part of range. 
            // Equal to the combined length of the sheet title and the first separator.
            int rangeLeftStartIndex = sheetTitleIdLenght + 1;

            // Get index of the first letter of the string representing right part of range. 
            int rangeRightStartIndex = range.LastIndexOf(@":") + 1;

            // Get string representing sheet title id - part of range.
            // And assign as an out parameter.
            sheetTitleId = range.Substring(sheetTitleIdStartIndex, sheetTitleIdLenght);

            // Get string representing right/bottom - part of range.
            string rangeRightBottom = range.Substring(rangeRightStartIndex)?.ToUpper();

            // Get string representing left/top - part of range.          
            string rangeLeftTop = range.Substring(rangeLeftStartIndex, rangeRightStartIndex - 1 - rangeLeftStartIndex)?.ToUpper();

            // Get index of the first letter of the string representing top part of range. 
            int rangeTopStartIndex = rangeLeftTop.IndexOfAny(Numbers);

            // Get index of the first letter of the string representing bottom part of range. 
            int rangeBottomStartIndex = rangeRightBottom.IndexOfAny(Numbers);

            // Get length of the string representing left part of the range.
            int rangeLeftLenght = rangeTopStartIndex;

            // Get length of the string representing right part of the range.
            int rangeRightLenght = rangeBottomStartIndex;
            
            // Get string representing left part of range.      
            string rangeLeft = rangeLeftTop.Substring(0, rangeLeftLenght);

            // Get string representing top part of range.
            string rangeTop = rangeLeftTop.Substring(rangeTopStartIndex).TrimEnd(':');

            // Get string representing right part of range.
            string rangeRight = rangeRightBottom.Substring(0, rangeRightLenght);

            // Get string representing bottom part of range.
            string rangeBottom = rangeRightBottom.Substring(rangeRightLenght);

            // Get value of the left column index described by the provided range.
            // And assign it as an out parameter.
            leftColumnIndex = RangeTranslator.ColumnIndexerStringToIndex(rangeLeft);

            // Get value of the top column index described by the provided range.
            // And assign it as an out parameter.       
            topRowIndex = RangeTranslator.RowIndexerStringToIndex(rangeTop);

            // Get value of the left column index described by the provided range.
            // And assign as an out parameter.    
            int rightColumnIndex = RangeTranslator.ColumnIndexerStringToIndex(rangeRight);

            // Get value of the left column index described by the provided range.
            // And assign as an out parameter.           
            int bottomRowIndex = RangeTranslator.RowIndexerStringToIndex(rangeBottom);

            // Calculate columns number. 5 2 1 
            columnCount = (rightColumnIndex + 1) - leftColumnIndex;

            // Calculate row number.
            rowCount = (bottomRowIndex + 1) - topRowIndex;
        }



        //public static void DisassembleRangeString(string range, out string outSheetTitleId, out int outLeftIndex, out int outTopIndex, out int outRightIndex, out int outBottomIndex)
        //{
        //    //%1 "Sheet1!AB123:BD345" = 0 - 0 based index for "S"
        //    //%2 "OtherSheet!C3:E14" = 0 - 0 based index for "O"
        //    //%3 "BigSheet!B1" = 0 - 0 based index for "B"
        //    //  Index of the first letter of the range sheet title id
        //    int sheetTitleIdStartIndex = 0;

        //    //%1 "Sheet1!AB123:BD345" = 6 - 0 based index for "!"
        //    //%2 "OtherSheet!C3:E14" = 10 - 0 based index for "!"
        //    //%3 "BigSheet!B1" = 8 - 0 based index for "!"
        //    // Length of the string representing range sheet title id
        //    int sheetTitleIdLenght = range.IndexOf(@"!");

        //    //%1 "Sheet1!AB123:BD345" = 7 - 0 based index of "A"
        //    //%2 "OtherSheet!C3:E14" = 11 - 0 based index of "C"
        //    //%3 "BigSheet!B1" = 9 - 0 based index of second "B"
        //    // Index of the first letter of the left range string
        //    int rangeLeftStartIndex = sheetTitleIdLenght + 1;

        //    // Index of the first letter of the right range string
        //    int rangeRightStartIndex;

        //    //%1 "Sheet1!AB123:BD345" = 13 - 0 based index for second "B"
        //    //%2 "OtherSheet!C3:E14 = 14 - 0 based index for "E"
        //    if (range.Contains(@":"))
        //    {
        //        rangeRightStartIndex = range.IndexOf(@":") + 1;



        //        // Result 0
        //        //               First char index / string length - sheet title id
        //        //%1 "Sheet1!AB123:BD345" ====== 0, 6 === from 'S' to first '1'   === "Sheet1"  
        //        //%2 "OtherSheet!C3:E14"  ====== 0, 10 === from 'O' to 't'    === "OtherSheet"    
        //        //%3 "BigSheet!B1"        ====== 0, 8 === from first 'B' to 't' === "BigSheet"         
        //        string sheetTitleId = range.Substring(sheetTitleIdStartIndex, sheetTitleIdLenght);

        //        //                First char index / string length - right bottom range string
        //        //%1 "Sheet1!AB123:BD345" ====== 13, 5 === from second 'B' to '5'  === "BD345"     
        //        //%2 "OtherSheet!C3:E14"  ====== 14, 3 === from 'E' to '4'           === "E14"        
        //        //%3 "BigSheet!B1"      ====== NONE, NONE === NONE                  === "NONE"            
        //        string rangeRightBottom = range.Substring(rangeRightStartIndex)?.ToUpper();

        //        //               First char index / string length -  left top range string
        //        //%1 "Sheet1!AB123:BD345" ====== 7, 5 === from 'A' to '3'          === "AB123"              
        //        //%2 "OtherSheet!C3:E14" ====== 11, 2 === from 'C' to '3'             === "C3"         
        //        //%3 "BigSheet!B1"        ====== 9, 2 === from second 'B' to '1'      === "B1"              
        //        string rangeLeftTop = range.Substring(rangeLeftStartIndex, rangeRightStartIndex - 1 - rangeLeftStartIndex)?.ToUpper();

        //        //%1 "AB123:BD345" = 2 - 0 based index of "1"
        //        //%2 "C3:E14" = 1 - 0 based index of "3"
        //        //%3 "B1" = 1 - 0 based index of  "1"
        //        // Index of the first letter of the top short range string
        //        int shortRangeTopStartIndex = rangeLeftTop.IndexOfAny(Numbers);


        //        //%1 "AB123:BD345" = 8 - 0 based index of the second "3"
        //        //%2 "C3:E14" = 4 - 0 based index of "1"
        //        //%3 "B1" = NONE - 0 based index of  "NONE"
        //        // Index of the first letter of the bottom short range string
        //        int shortRangeBottomStartIndex = rangeRightBottom.IndexOfAny(Numbers);



        //        int shortRangeLeftLenght = shortRangeTopStartIndex;
        //        int shortRangeRightLenght = shortRangeBottomStartIndex;


        //        //        First char index / string length -  left short range string
        //        //%1 "AB123:BD345" ====== 0, 2 === from 'A' to 'B'             === "AB"              
        //        //%2 "C3:E14"      ====== 0, 1 === 'C'                          === "C"         
        //        //%3 "B1"          ====== 0, 1 === 'B'                          === "B"   
        //        string shortRangeLeft = rangeLeftTop.Substring(0, shortRangeLeftLenght);

        //        //        First char index / string length -  left short range string
        //        //%1 "AB123:BD345" ====== 7, 5 === from 'A' to 'B'             === "AB"              
        //        //%2 "C3:E14"     ====== 11, 2 === from 'C' to '3'             === "C3"         
        //        //%3 "B1"          ====== 9, 2 === from second 'B' to '1'      === "B1"  
        //        string shortRangeTop = rangeLeftTop.Substring(shortRangeTopStartIndex).TrimEnd(':');

        //        //        First char index / string length -  left short range string
        //        //%1 "AB123:BD345" ====== 7, 5 === from 'A' to 'B'             === "AB"              
        //        //%2 "C3:E14"     ====== 11, 2 === from 'C' to '3'             === "C3"         
        //        //%3 "B1"          ====== 9, 2 === from second 'B' to '1'      === "B1"  
        //        string shortRangeRight = rangeRightBottom.Substring(0, shortRangeRightLenght);

        //        //        First char index / string length -  left short range string
        //        //%1 "AB123:BD345" ====== 7, 5 === from 'A' to 'B'             === "AB"              
        //        //%2 "C3:E14"     ====== 11, 2 === from 'C' to '3'             === "C3"         
        //        //%3 "B1"          ====== 9, 2 === from second 'B' to '1'      === "B1"  
        //        string shortRangeBottom = rangeRightBottom.Substring(shortRangeRightLenght);
                
        //        // Result 1
        //        //     First char index / string length - left column index
        //        //%1 "AB"       ====== 0, 2 === from 'A' to first B'       === "AB" = 27  
        //        //%2 "C"        ====== 0, 1 === 'C'                        === "C"  = 2  
        //        //%3 "B"        ====== 0, 1 === "B'                        === "B"  = 1
        //        // Left column index
        //        int leftColumnIndex = RangeTranslator.ColumnIndexerStringToIndex(shortRangeLeft);


        //        // Result 2
        //        //     First char index / string length - top row index
        //        //%1 "123"       ====== 0, 3 === from '1' to 3'       === "123" = 122  
        //        //%2 "3"        ====== 0, 1 === '3'                        === "3"  = 2  
        //        //%3 "1"        ====== 0, 1 === "1'                        === "2"  = 0
        //        // Top row index
        //        int topRowIndex = RangeTranslator.RowIndexerStringToIndex(shortRangeTop);

        //        // Result 3
        //        //     First char index / string length - right column index
        //        //%1 "BD"       ====== 0, 2 === from 'B' to first D'       === "BD" = 56  
        //        //%2 "E"        ====== 0, 1 === 'C'                        === "C"  = 2  
        //        //%3 "NONE"     ====== 0, 0 === "NONE'                     === "NONE"  = NONE
        //        // Right column index
        //        int rightColumnIndex = RangeTranslator.ColumnIndexerStringToIndex(shortRangeRight);

        //        // Result 4
        //        //     First char index / string length - bottom row index
        //        //%1 "345"       ====== 0, 3 === from '3' to  5'       === "123" = 344  
        //        //%2 "14"        ====== 0, 2 === '14'                  === "14"  = 13  
        //        //%3 "NONE"      ====== 0, 0 === "NONE'                === "NONE" = "NONE"
        //        // Top row index
        //        int bottomRowIndex = RangeTranslator.RowIndexerStringToIndex(shortRangeBottom);



        //        // Result 5
        //        //%1 "AB123:BD345" = columnCount = ((56 + 1) - 27)
        //        //%2 "C3:E14" = columnCount = ((4 + 1) - 2)
        //        //%3 "B1" = columnCount = null
        //        // Columns Count
        //        int columnCount = rightColumnIndex + 1 - leftColumnIndex;


        //        // Result 6
        //        //%1 "AB123:BD345" = rowsCount = ((344 + 1) - 122)
        //        //%2 "C3:E14" = rowsCount = ((13 + 1) - 2)
        //        //%3 "B1" = rowsCount = null
        //        // Rows Count
        //        int rowCount = bottomRowIndex + 1 - topRowIndex;

        //        // Assign all out parameters
        //        outSheetTitleId = sheetTitleId;
        //        outLeftIndex = leftColumnIndex;
        //        outTopIndex = topRowIndex;
        //        outRightIndex = rightColumnIndex;
        //        outBottomIndex = bottomRowIndex;
        //    }
        //    // 
        //    //%3 "BigSheet!B1" = NONE - 0 based index for last char 
        //    else
        //    {

        //        rangeRightStartIndex = range.Length - 1;
        //    }
        //}

        public static string GetRangeString(string sheetName, int columnLeftIndex, int rowTopIndex, int? colunRightIndex, int? rowBottomIndex)
        {
            string range = sheetName + "!" + $"{IndexToCapitalChar(columnLeftIndex)}{rowTopIndex + 1}";

            if (colunRightIndex is null && rowBottomIndex is null)
                return range;
            else if (colunRightIndex is null)
                return range + $":{rowBottomIndex.Value + 1}";
            else if (rowBottomIndex is null)
                return range + $":{IndexToCapitalChar(colunRightIndex.Value)}";
            else
                return range + $":{IndexToCapitalChar(colunRightIndex.Value)}{rowBottomIndex.Value + 1}";
        }

        internal static string GetCellString(string sheetName, int columnIndex, int rowIndex)
        {
            return sheetName + "!" + $"{IndexToCapitalChar(columnIndex)}{rowIndex + 1}";
        }

        private static string IndexToCapitalChar(int index)
        {
            string rangeChars;

            if (index < 26)
                rangeChars = ((Char)(65 + index)).ToString();

            else
            {
                int multiplier = index / 26;

                int rest = index - (26 * multiplier);

                rangeChars = ((Char)(65 + (multiplier - 1))).ToString();
                rangeChars += ((Char)(65 + rest)).ToString();

            }

            return rangeChars;
        }

        private static int ColumnIndexerStringToIndex(string indexerString)
        {

            char char1 = indexerString[0];

            // One letter - A - 0    Z - 25
            if (indexerString.Length == 1)
            {
                return (char.ToUpper(char1) - 65);
            }
            // Two letters - AA - 26   ?? - 255   
            else
            {
                char char2 = indexerString[1];

                int firstCharScore = (((char.ToUpper(char1) - 65) * 26) + 26);
                int secondCharScore = (char.ToUpper(char2) - 65);

                return (firstCharScore + secondCharScore);
            }
        }

        private static int RowIndexerStringToIndex(string indexerString)
        {
            return (int.Parse(indexerString) - 1);
        }

        //private static string IndexToLowerCaseChar(int number)
        //{

        //    Char c = (Char)(97 + number);

        //    return c.ToString();

        //}
    }
}
