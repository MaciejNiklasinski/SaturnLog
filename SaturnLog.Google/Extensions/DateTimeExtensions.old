using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SaturnLog.Google
{
    public static class DateTimeExtensions
    {
        // This presumes that weeks start with Monday.
        // Week 1 is the 1st week of the year with a Thursday in it.
        public static int GetIso8601WeekOfYear(this DateTime time)
        {
            // Seriously cheat.  If its Monday, Tuesday or Wednesday, then it'll 
            // be the same week# as whatever Thursday, Friday or Saturday are,
            // and we always get those right
            DayOfWeek day = CultureInfo.InvariantCulture.Calendar.GetDayOfWeek(time);
            if (day >= DayOfWeek.Monday && day <= DayOfWeek.Wednesday)
            {
                time = time.AddDays(3);
            }

            // Return the week of our adjusted day
            return CultureInfo.InvariantCulture.Calendar.GetWeekOfYear(time, CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday);
        }
        
        public static string ToTimestamp(this DateTime dateTime)
        {
            return dateTime.ToString("yyyyMMddHHmmssfff");
        }

        public static bool IsEqualWithTimestamp(this DateTime dateTime, string timestamp)
        {
            return dateTime.ToTimestamp() == timestamp;
        }

        public static bool IsLaterThan(this DateTime dateTime, string timestamp)
        {
            if (!int.TryParse(timestamp.Substring(0, 4), out int year))
                throw new ArgumentException($"Invalid timestamp format. Value of the year cannot be obtained from: '{timestamp.Substring(0, 4)}'", nameof(timestamp));

            if (dateTime.Year > year) return true;
            else if (dateTime.Year < year) return false;
            

            if (!int.TryParse(timestamp.Substring(4, 2), out int month))
                throw new ArgumentException($"Invalid timestamp format. Value of the month cannot be obtained from: '{timestamp.Substring(4, 2)}'", nameof(timestamp));
            
            if (dateTime.Month > month) return true;
            else if (dateTime.Month < month) return false;

            
            if (!int.TryParse(timestamp.Substring(6, 2), out int day))
                throw new ArgumentException($"Invalid timestamp format. Value of the day cannot be obtained from: '{timestamp.Substring(6, 2)}'", nameof(timestamp));

            if (dateTime.Day > day) return true;
            else if (dateTime.Day < day) return false;

            
            if (!int.TryParse(timestamp.Substring(8, 2), out int hour))
                throw new ArgumentException($"Invalid timestamp format. Value of the hour cannot be obtained from: '{timestamp.Substring(8, 2)}'", nameof(timestamp));

            if (dateTime.Hour > hour) return true;
            else if (dateTime.Hour < hour) return false;
            

            if (!int.TryParse(timestamp.Substring(10, 2), out int minute))
                throw new ArgumentException($"Invalid timestamp format. Value of the minute cannot be obtained from: '{timestamp.Substring(10, 2)}'", nameof(timestamp));

            if (dateTime.Minute > minute) return true;
            else if (dateTime.Minute < minute) return false;


            if (!int.TryParse(timestamp.Substring(12, 2), out int second))
                throw new ArgumentException($"Invalid timestamp format. Value of the second cannot be obtained from: '{timestamp.Substring(12, 2)}'", nameof(timestamp));

            if (dateTime.Second > second) return true;
            else if (dateTime.Second < second) return false;
            

            if (!int.TryParse(timestamp.Substring(14, 3), out int millisecond))
                throw new ArgumentException($"Invalid timestamp format. Value of the millisecond cannot be obtained from: '{timestamp.Substring(14, 3)}'", nameof(timestamp));

            if (dateTime.Millisecond > millisecond) return true;
            else return false;            
        }

        public static bool IsEarlierThan(this DateTime dateTime, string timestamp)
        {
            if (!int.TryParse(timestamp.Substring(0, 4), out int year))
                throw new ArgumentException($"Invalid timestamp format. Value of the year cannot be obtained from: '{timestamp.Substring(0, 4)}'", nameof(timestamp));

            if (dateTime.Year < year) return true;
            else if (dateTime.Year > year) return false;


            if (!int.TryParse(timestamp.Substring(4, 2), out int month))
                throw new ArgumentException($"Invalid timestamp format. Value of the month cannot be obtained from: '{timestamp.Substring(4, 2)}'", nameof(timestamp));

            if (dateTime.Month < month) return true;
            else if (dateTime.Month > month) return false;


            if (!int.TryParse(timestamp.Substring(6, 2), out int day))
                throw new ArgumentException($"Invalid timestamp format. Value of the day cannot be obtained from: '{timestamp.Substring(6, 2)}'", nameof(timestamp));

            if (dateTime.Day < day) return true;
            else if (dateTime.Day > day) return false;


            if (!int.TryParse(timestamp.Substring(8, 2), out int hour))
                throw new ArgumentException($"Invalid timestamp format. Value of the hour cannot be obtained from: '{timestamp.Substring(8, 2)}'", nameof(timestamp));

            if (dateTime.Hour < hour) return true;
            else if (dateTime.Hour > hour) return false;


            if (!int.TryParse(timestamp.Substring(10, 2), out int minute))
                throw new ArgumentException($"Invalid timestamp format. Value of the minute cannot be obtained from: '{timestamp.Substring(10, 2)}'", nameof(timestamp));

            if (dateTime.Minute < minute) return true;
            else if (dateTime.Minute > minute) return false;


            if (!int.TryParse(timestamp.Substring(12, 2), out int second))
                throw new ArgumentException($"Invalid timestamp format. Value of the second cannot be obtained from: '{timestamp.Substring(12, 2)}'", nameof(timestamp));

            if (dateTime.Second < second) return true;
            else if (dateTime.Second > second) return false;


            if (!int.TryParse(timestamp.Substring(14, 3), out int millisecond))
                throw new ArgumentException($"Invalid timestamp format. Value of the millisecond cannot be obtained from: '{timestamp.Substring(14, 3)}'", nameof(timestamp));

            if (dateTime.Millisecond < millisecond) return true;
            else return false;
        }
    }
}
